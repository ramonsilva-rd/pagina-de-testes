/*! Resultados Digitais - Thu Jun 17 2021 14:14:56 GMT-0300 (-03) */
"use strict";

/* globals SensitiveDataFilter */
var FormFields = function FormFields() {
  var VALID_EMAIL = /^[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/;

  function allowedFieldsFilter(input, index, findFieldName) {
    var result = SensitiveDataFilter.filter([{
      name: findFieldName(index, input),
      value: input.value,
      sensitive: input.dataset.sensitive
    }]);
    return result.length > 0;
  }

  function retrieveAllowedFields(form, findFieldName) {
    var inputs = form.querySelectorAll('select, textarea, button, input:not([type="password"])');
    var allowedFields = Array.from(inputs).filter(function (input, index) {
      return allowedFieldsFilter(input, index, findFieldName);
    });
    return serializeArray(allowedFields);
  }

  function hasNameEmail(fieldName) {
    return fieldName.replace(/[\s_-]/g, '').toLowerCase().indexOf('email') > -1;
  }

  function isEmailField(field) {
    var hasTypeEmail = false;
    var currentField = field.type;

    if (currentField) {
      hasTypeEmail = currentField === 'email';
    }

    return hasNameEmail(field.name) || hasTypeEmail;
  }

  function isValidEmail(value) {
    var email_validator = new RegExp(VALID_EMAIL);
    return email_validator.test(value);
  }

  function findEmail(fieldMapping) {
    var found = false;
    fieldMapping.forEach(function (field) {
      if (isEmailField(field) && isValidEmail(field.value)) {
        field.name = 'email';
        found = true;
        return false;
      }
    });
    return found;
  }

  function singleFields(form, findFieldName) {
    var ignoredFields = ['password', 'submit', 'button', 'reset', 'checkbox', 'radio'];
    var fields = Array.from(form.querySelectorAll('select:not([multiple="multiple"]), textarea, input')).filter(function (field) {
      return ignoredFields.indexOf(field.type) < 0;
    });
    return Array.from(fields).filter(function (input, index) {
      return allowedFieldsFilter(input, index, findFieldName);
    });
  }

  function serializeArray(formElements) {
    var arr = [];
    formElements.forEach(function (field) {
      if (!field.name || field.disabled || ['file', 'reset', 'submit', 'button'].indexOf(field.type) > -1) return;

      if (field.type === 'select-multiple') {
        Array.from(field.options).forEach(function (option) {
          if (!option.selected) return;
          arr.push({
            name: field.name,
            value: option.value
          });
        });
        return;
      }

      if (['checkbox', 'radio'].indexOf(field.type) > -1 && !field.checked) return;
      arr.push({
        name: field.name,
        value: field.value
      });
    });
    return arr;
  }

  return {
    findEmail: findEmail,
    singleFields: singleFields,
    retrieveAllowedFields: retrieveAllowedFields
  };
}();
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RDErrorNotifier = /*#__PURE__*/function () {
  function RDErrorNotifier(requestStatus, requestBody) {
    _classCallCheck(this, RDErrorNotifier);

    this.requestStatus = requestStatus;
    this.requestBody = requestBody;
  }

  _createClass(RDErrorNotifier, [{
    key: "notify",
    value: function notify() {
      var error = JSON.stringify({
        status: this.requestStatus,
        body: this.requestBody
      });
      return doRequest('POST', this.URL, error, {
        options: {
          json: true
        }
      });
    }
  }]);

  return RDErrorNotifier;
}();

RDErrorNotifier.prototype.URL = 'https://qtmlugypw3.execute-api.us-east-1.amazonaws.com/production';
"use strict";

/* eslint-disable func-names */
var RDIntegrationCookieConsent = function () {
  var COOKIES = ['cookieconsent_status_ANALYTICS', 'cookieconsent_status_ESSENTIAL', 'cookieconsent_status_MARKETING', 'cookieconsent_status_PERSONALIZATION', 'cookieconsent_status_UNCATEGORIZED'];

  var hasOldCookie = function hasOldCookie(cookieName) {
    return document.cookie.split(';').some(function (cookie) {
      return cookie.trim().indexOf("".concat(cookieName, "=")) === 0;
    });
  };

  var foundOldCookies = function foundOldCookies() {
    return COOKIES.some(hasOldCookie);
  };

  function insertCookieConsentData(formData) {
    if (window.RDCookieControl.configuration === null) {
      return formData;
    }

    if (!foundOldCookies()) {
      return formData;
    }

    var privacyDataBrowser = {
      analytics: window.RDCookieControl.analytics.track,
      functional: window.RDCookieControl.functional.track,
      banner_type: window.RDCookieControl.configuration.type
    };
    formData.push({
      name: 'privacy_data[browser]',
      value: JSON.stringify(privacyDataBrowser)
    });
    return formData;
  }

  return {
    insertCookieConsentData: insertCookieConsentData
  };
}();
/* istanbul ignore next */
// eslint-disable-next-line no-prototype-builtins


if (typeof module !== 'undefined' && module.hasOwnProperty('exports')) {
  module.exports = RDIntegrationCookieConsent;
}
"use strict";

var RDIntegrationCreditCard = function () {
  function validNumber(creditCardNumber) {
    var ca;
    var sum = 0;
    var mul = 0;
    var number;
    var length;
    var MIN_LENGTH = 14;
    if (typeof creditCardNumber !== 'string') return false;
    number = creditCardNumber.replace(/\D/g, '');
    length = number.length;
    if (length < MIN_LENGTH) return false;

    while (length--) {
      ca = parseInt(number.charAt(length), 10) << mul;
      sum += ca - (ca > 9) * 9; // 1 <--> 0 toggle.

      mul ^= 1; // mul = 1 - mul;
    }

    return sum % 10 === 0 && sum > 0;
  }

  return {
    validNumber: validNumber
  };
}();

var SensitiveDataFilter = function () {
  var BLOCKED_FIELD_NAMES = ['captcha', '_wpcf7', '_wpnonce', '_viewstate', '_previouspage', '_viewstategenerator', 'creditcard', 'credit_card', 'credit_number', 'cardnumber', 'cvv', 'cvc', 'securitycode', 'pagseguro', 'cielo', 'pagarme', 'billing', 'erede_api', 'cartao_credito', 'cartaocredito', 'cart√£o', 'checkout', 'rede_credit', 'cardholder'];

  function isValidCreditCardNumber(field) {
    return RDIntegrationCreditCard.validNumber(field.value);
  }

  function isBlockedName(field, regexFilter) {
    return regexFilter.test(field.name);
  }

  function buildRegexFilter(blockList) {
    return new RegExp(blockList.join('|'), 'i');
  }

  function filter(data) {
    var regexFilter = buildRegexFilter(BLOCKED_FIELD_NAMES);
    return data.filter(function (field) {
      return field.sensitive !== 'true';
    }).filter(function (field) {
      return isValidCreditCardNumber(field) === false;
    }).filter(function (field) {
      return isBlockedName(field, regexFilter) === false;
    });
  }

  return {
    filter: filter
  };
}();
/* istanbul ignore next */
// eslint-disable-next-line no-prototype-builtins


if (typeof module !== 'undefined' && module.hasOwnProperty('exports')) {
  module.exports = {
    RDIntegrationCreditCard: RDIntegrationCreditCard,
    SensitiveDataFilter: SensitiveDataFilter
  };
}
"use strict";

/* eslint-disable func-names */
var RDIntegrationDataPrivacy = function () {
  function isPrivacyField(field) {
    return !!field.dataset.privacy;
  }

  function isPrivacyCheckboxField(field) {
    return isPrivacyField(field) && field.getAttribute('type') === 'checkbox';
  }

  function findDataPrivacyCheckboxesFields(form) {
    var dataPrivacyCheckboxes = [];
    var checkboxes = Array.from(form.querySelectorAll('input[type="checkbox"][data-privacy]'));
    checkboxes.forEach(function (field) {
      // eslint-disable-next-line no-param-reassign
      field.value = Number(field.checked);
      dataPrivacyCheckboxes.push(field);
    });
    return dataPrivacyCheckboxes;
  }

  return {
    isPrivacyCheckboxField: isPrivacyCheckboxField,
    findDataPrivacyCheckboxesFields: findDataPrivacyCheckboxesFields
  };
}();
/* istanbul ignore next */
// eslint-disable-next-line no-prototype-builtins


if (typeof module !== 'undefined' && module.hasOwnProperty('exports')) {
  module.exports = RDIntegrationDataPrivacy;
}
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* globals RDIntegrationCookieConsent */

/* globals RDIntegrationDataPrivacy */

/* globals FormFields */
var FieldMapping = function FieldMapping() {
  var fieldMapping = [];

  function resetFieldMapping() {
    fieldMapping = [];
  }

  function prettifiedNameAttribute(field) {
    var underscoredName;
    var prettifiedName;
    var fieldName = field.getAttribute('name');
    var leftSquareBrackets = /\[/g;
    var rightSquareBrackets = /\]/g;
    if (!fieldName) return false;
    underscoredName = fieldName.replace(leftSquareBrackets, '_');
    prettifiedName = underscoredName.replace(rightSquareBrackets, '');

    if (RDIntegrationDataPrivacy.isPrivacyCheckboxField(field)) {
      return prettifiedName;
    }

    return field.type === 'checkbox' ? "".concat(prettifiedName, "[]") : prettifiedName;
  }

  function findFieldLabel(input) {
    try {
      var label = input.labels[0];
      return label ? label.innerText.trim() : false;
    } catch (e) {
      console.log(e);
      return false;
    }
  }

  function findFieldName(index, field) {
    var fieldType = field.getAttribute('type');
    var defaultName = 'Field ' + index + ' ' + fieldType;
    return prettifiedNameAttribute(field) || findFieldLabel(field) || field.getAttribute('id') || defaultName;
  }

  function truncateStringValue(value) {
    if (typeof value === 'string') {
      return value.slice(0, 255);
    }

    return value;
  }

  function pushFieldsToFieldMapping(fields) {
    Array.from(fields).forEach(function (field, index) {
      fieldMapping.push({
        name: findFieldName(index, field),
        value: truncateStringValue(field.value),
        type: field.type
      });
    });
  }

  function mapSingleFields($form) {
    var fields = FormFields.singleFields($form, findFieldName);
    pushFieldsToFieldMapping(fields);
  }

  function mapCheckboxesFields($form) {
    var checkboxes = Array.from($form.querySelectorAll('input[type="checkbox"]:checked:not([data-privacy])'));
    checkboxes.forEach(function (field) {
      field.name = field.name.split('.')[0];
    });
    pushFieldsToFieldMapping(checkboxes);
  }

  function mapDataPrivacyCheckboxesFields($form) {
    var $dataPrivacyCheckboxes = RDIntegrationDataPrivacy.findDataPrivacyCheckboxesFields($form);
    pushFieldsToFieldMapping($dataPrivacyCheckboxes);
  }

  function mapRadioFields($form) {
    var $radioFields = $form.querySelectorAll('input[type="radio"]:checked');
    pushFieldsToFieldMapping($radioFields);
  }

  function mapFields($form) {
    resetFieldMapping();
    mapSingleFields($form);
    mapCheckboxesFields($form);
    mapDataPrivacyCheckboxesFields($form);
    mapRadioFields($form);
    return fieldMapping;
  }

  return {
    mapFields: mapFields,
    truncateStringValue: truncateStringValue,
    findFieldName: findFieldName
  };
}();

var RdIntegrationIdentifier = function RdIntegrationIdentifier() {
  function actionValue(form) {
    var action = form.action;

    if (_typeof(action) === 'object') {
      return action.value;
    }

    return typeof action !== 'undefined' ? action : '';
  }

  function formHasDynamicIdentifier($form) {
    var index;
    var dynamic = false;
    var actionTypes = ['squarespace.com', 'realty_ajax_shortcode_contact_form'];

    for (index = 0; index < actionTypes.length; index += 1) {
      if (actionValue($form).indexOf(actionTypes[index]) > -1) {
        dynamic = true;
      }
    }

    return dynamic;
  }

  function formId($form) {
    if (formHasDynamicIdentifier($form)) {
      return false;
    }

    return $form.getAttribute('id');
  }

  function conversionIdentifier($form) {
    var pathname = window.location.pathname === '/' ? 'home' : window.location.pathname;
    var identifier = $form.getAttribute('name') || formId($form) || pathname;
    return FieldMapping.truncateStringValue(identifier);
  }

  return {
    identifier: conversionIdentifier
  };
}();

var RdIntegration = function () {
  'use strict';

  var $form,
      $token_rdstation,
      $identifier,
      $options,
      $accountSettings,
      $,
      _integrate = function _integrate(token_rdstation, identifier, options) {
    _setParams(token_rdstation, identifier, options);

    _bindSubmitCallback();

    _initDebugMode();
  },
      _setParams = function _setParams(token_rdstation, identifier, options) {
    $options = options || {};
    $token_rdstation = token_rdstation;
    $identifier = identifier;
  },
      _bindSubmitCallback = function _bindSubmitCallback() {
    document.querySelector('input[type="submit"], button').addEventListener('click', _submitClickHandler);
  },
      _submitClickHandler = function _submitClickHandler(event) {
    $accountSettings = _getAccountSettings();
    $form = _findForm(event.target);
    if (!$form) return;
    var allowedFields = FormFields.retrieveAllowedFields($form, FieldMapping.findFieldName);
    if (!FormFields.findEmail(allowedFields)) return;

    var inputs = _prepareFormData(allowedFields);

    if (typeof $form.checkValidity === 'function') {
      if (!$form.checkValidity()) {
        return;
      }
    }

    _post(inputs, _submitForm);

    event.preventDefault();
  },
      _findForm = function _findForm(button) {
    return button.closest('form:not([data-internal-rdstation-form])');
  },
      _prepareFormData = function _prepareFormData(allowedFields) {
    var inputs = _fieldMap(allowedFields);

    inputs.push($accountSettings.identifier, $accountSettings.token, _getQueryParams());
    return inputs;
  },
      _fieldMap = function _fieldMap(inputs) {
    ;

    if ($options.fieldMapping) {
      inputs = _translateFields(inputs);
    }

    return inputs;
  },
      _translateFields = function _translateFields(inputs) {
    var translatedInputs = inputs.map(function (field, index) {
      var newName = $options.fieldMapping[field.name];

      if (newName) {
        field.name = newName;
      }

      return field;
    });
    return translatedInputs;
  },
      _submitForm = function _submitForm() {
    if (_actionIsValid($form)) {
      $form.dispatchEvent(new Event('submit'));
    } else {
      var submitButton = $form.querySelector('input[type="submit"], button');

      if (submitButton) {
        submitButton.removeEventListener('click', _submitClickHandler);
        submitButton.click();
      }
    }
  },
      _actionIsValid = function _actionIsValid(form) {
    var action = form.getAttribute('action');
    return typeof action !== "undefined" && action.trim() !== "";
  },
      _getAccountSettings = function _getAccountSettings() {
    return {
      identifier: {
        name: 'identificador',
        value: $identifier
      },
      token: {
        name: 'token_rdstation',
        value: $token_rdstation
      }
    };
  },
      _read_cookie = function _read_cookie(name) {
    var cookies = document.cookie.split(';'),
        d,
        cookie;
    name = name + '=';

    for (d = 0; d < cookies.length; d++) {
      cookie = cookies[d];

      while (cookie.charAt(0) === ' ') {
        cookie = cookie.substring(1, cookie.length);
      }

      if (cookie.indexOf(name) === 0) {
        return cookie.substring(name.length, cookie.length);
      }
    }

    return null;
  },
      _getQueryParams = function _getQueryParams() {
    return {
      name: 'query_params',
      value: location.search.substring(1)
    };
  },
      _getCookieId = function _getCookieId() {
    var leadTrackingCookie = _read_cookie("rdtrk");

    if (leadTrackingCookie !== null) {
      leadTrackingCookie = JSON.parse(unescape(leadTrackingCookie));
      return leadTrackingCookie.id;
    }
  },
      _insertClientId = function _insertClientId(formData) {
    var client_id = _getCookieId();

    if (typeof client_id !== "undefined") {
      formData.push({
        name: 'client_id',
        value: client_id
      });
    }

    return formData;
  },
      _insertCookieValues = function _insertCookieValues(formData) {
    var utmzValue = _read_cookie('__utmz');

    var trafficSourceValue = _read_cookie('__trf.src');

    utmzValue && formData.push({
      name: 'c_utmz',
      value: utmzValue
    });
    trafficSourceValue && formData.push({
      name: 'traffic_source',
      value: trafficSourceValue
    });
    return formData;
  },
      _insertInternalSource = function _insertInternalSource(formData, internalSource) {
    formData.push({
      name: '_is',
      value: internalSource
    });
    return formData;
  },
      _post = function _post(formFields, callback, internalSource) {
    var endpoint;
    var errorNotifier;
    internalSource = internalSource || 3;
    endpoint = internalSource === 10 ? 'form-integrations' : 'conversions';
    formFields = _insertClientId(formFields);
    formFields = _insertCookieValues(formFields);
    formFields = _insertInternalSource(formFields, internalSource);
    formFields = RDIntegrationCookieConsent.insertCookieConsentData(formFields);
    var formData = [];
    formFields.forEach(function (field, index) {
      formData.push(encodeURIComponent(field.name) + '=' + encodeURIComponent(field.value));
    });
    var formDataEncoded = formData.join('&').replace(/%20/g, '+');
    var additionalHeaders = [{
      key: 'Content-Type',
      value: 'application/x-www-form-urlencoded; charset=UTF-8'
    }, {
      key: 'Referrer-Policy',
      value: 'strict-origin-when-cross-origin'
    }];
    doRequest('POST', 'http://localhost:3000/api/1.3/' + endpoint, formDataEncoded, {
      options: {
        form_econded: true,
        withCredentials: false,
        headers: additionalHeaders
      }
    }, function (jqXHR) {
      if (callback) {
        callback(jqXHR, jqXHR.statusText);
      }
    }, // Success Callback
    function (jqXHR) {
      if (jqXHR.status >= 500) {
        errorNotifier = new RDErrorNotifier(jqXHR.status, formData);
        errorNotifier.notify();
        return;
      }

      if (callback) {
        callback(jqXHR, jqXHR.statusText);
      }
    } // Error Callback
    );
  },
      _initDebugMode = function _initDebugMode() {
    if ($options.debugMode === true) {
      _analyse();
    }
  },
      _analyse = function _analyse() {
    $options = $options || {};
    console.info('Iniciando');

    var submitButtons = _getElementSubmit(),
        forms = _findForm(submitButtons);

    if (submitButtons.length === 0) {
      console.warn('Nenhum botao de submit encontrado');
    } else {
      console.info('Botoes de submit encontrados: ' + submitButtons.length);
    }

    if (forms.length === 0) {
      console.warn('Nenhum formulario encontrado');
    } else {
      console.info('Formularios encontrados: ' + forms.length);
    }

    _analyseForms(forms);

    console.info('Finalizado');
  },
      _analyseForms = function _analyseForms(forms) {
    $accountSettings = _getAccountSettings();
    forms.forEach(function (form, index) {
      var inputs = _prepareFormData(form),
          mappedFields = [];

      console.log('');
      console.info(index + 1 + ' formulario');

      if (!FormFields.findEmail(form)) {
        console.warn('Campo de email nao encontrado');
      } else {
        console.info('Campo de email encontrado');
      }

      inputs.forEach(function (input, index) {
        mappedFields.push(input.name);
      });
      console.info('Campos mapeados: ' + mappedFields.join(", "));
    });
    console.log('');
  },
      _integrateAll = function _integrateAll(token_rdstation, options) {
    $options = options || {};
    $token_rdstation = token_rdstation;

    if (localStorage.getItem('RdIntegrationFormData')) {
      _sendPendingPosts();
    }

    _bindForms();
  },
      _bindForms = function _bindForms() {
    document.querySelectorAll('form').forEach(function (element) {
      var hasInternalSourceField = element.querySelector('input[name="internal_source"], input[name="_is"]');

      if (!hasInternalSourceField) {
        element.addEventListener('submit', _submitHandler);
      }
    });
  },
      _submitHandler = function _submitHandler(event) {
    var $form = event.target.closest('form');
    var fieldMapping = FieldMapping.mapFields($form);
    if (!FormFields.findEmail(fieldMapping)) return;
    $identifier = RdIntegrationIdentifier.identifier($form);

    _triggerPost(fieldMapping);
  },
      _triggerPost = function _triggerPost(inputsData) {
    inputsData = _insertDefaultParameters(inputsData);

    _setPendingSubmissionStatus(inputsData);

    _post(inputsData, function (jqXHR) {
      _resetPendingSubmission(jqXHR);
    }, 10);
  },
      _insertDefaultParameters = function _insertDefaultParameters(inputsData) {
    inputsData.push({
      name: 'identificador',
      value: $identifier
    }, {
      name: 'token_rdstation',
      value: $token_rdstation
    }, {
      name: 'form_url',
      value: location.href.split('?')[0]
    }, {
      name: 'page_title',
      value: document.title
    });
    return inputsData;
  },
      _setPendingSubmissionStatus = function _setPendingSubmissionStatus(inputsData) {
    localStorage.setItem('RdIntegrationFormData', JSON.stringify(inputsData));
  },
      _sendPendingPosts = function _sendPendingPosts() {
    var inputsData = JSON.parse(localStorage.getItem('RdIntegrationFormData'));

    _post(inputsData, function (jqXHR) {
      _resetPendingSubmission(jqXHR);
    }, 10);
  },
      _resetPendingSubmission = function _resetPendingSubmission(jqXHR) {
    if (jqXHR.readyState === 4) {
      localStorage.removeItem('RdIntegrationFormData');
    }
  };

  return {
    integrate: _integrate,
    post: _post,
    analyse: _analyse,
    integrateAll: _integrateAll
  };
}();

function RDStationFormIntegration(token_rdstation, identifier, options) {
  'use strict';

  RdIntegration.integrate(token_rdstation, identifier, options);
}
"use strict";

function doRequest(method, url, data, options) {
  var callbackSuccess = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var callbackError = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var beforeSendCallback = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
  var httpRequest = new XMLHttpRequest();
  if (!httpRequest) return;
  httpRequest.open(method, url, true);

  if (beforeSendCallback) {
    beforeSendCallback();
  }

  if (options.withCredentials) {
    httpRequest.withCredentials = options.withCredentials;
  }

  if (options.json) {
    httpRequest.setRequestHeader('Accept', 'application/json; charset=UTF-8');
    httpRequest.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
  } else if (options.form_econded) {
    httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
  }

  if (options.headers) {
    options.headers.forEach(function (header) {
      httpRequest.setRequestHeader(header.key, header.value);
    });
  }

  httpRequest.send(data);

  httpRequest.onreadystatechange = function () {
    if (httpRequest.readyState === 4) {
      if (httpRequest.status >= 200 && httpRequest.status < 300) {
        if (callbackSuccess != null) {
          callbackSuccess(httpRequest);
        }
      } else if (callbackError != null) {
        callbackError(httpRequest);
      }
    }
  };
}